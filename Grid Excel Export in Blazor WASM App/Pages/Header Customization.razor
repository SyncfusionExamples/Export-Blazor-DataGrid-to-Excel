@page "/headercell customization"
@using Syncfusion.Blazor.Grids

<SfGrid ID="Grid" @ref="BlazorDataGrid" DataSource="@Orders" AllowExcelExport="true" Toolbar="@(new List<string>() { "ExcelExport" })">
    <GridEvents ExcelHeaderQueryCellInfoEvent="ExcelHeaderQueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" TValue="Order"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

@code{
    private SfGrid<Order>? BlazorDataGrid;

    public List<Order>? Orders { get; set; }

    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 10).Select(x => new Order()
        {
            OrderID = 1000 + x,
            CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = DateTime.Now.AddDays(-x),
        }).ToList();
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string? CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "Grid_excelexport")//Id is combination of Grid's ID and itemname
        {
            var excelExportProperties = new ExcelExportProperties();
            var excelTheme = new ExcelTheme()
                {
                    Header = new ExcelStyle()
                    {
                        FontName = "Segoe UI",
                        FontColor = "#DC143C", //red color code
                        FontSize = 13
                    }
                };
            excelExportProperties.Theme = excelTheme;
            await this.BlazorDataGrid!.ExportToExcelAsync(excelExportProperties);
        }
    }
    /// <summary>
    ///  Handler to Customize the header cell when exporting to Excel.
    /// </summary>
    /// <param name="args"></param>
    public void ExcelHeaderQueryCellInfoHandler(ExcelHeaderQueryCellInfoEventArgs args)
    {
        //Below code customizes the back color of header in Excel
        args.Cell.CellStyle.BackColor = "#00FFFF";//aqua color
    }
}