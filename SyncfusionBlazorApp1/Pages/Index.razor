@page "/"
@using Syncfusion.Blazor.Grids

<SfGrid @ref="BlazorDataGrid" DataSource="@Orders" AllowExcelExport="true" Toolbar="@(new List<string>() { "ExcelExport" })">
    <GridEvents ExcelHeaderQueryCellInfoEvent="ExcelHeaderQueryCellInfoHandler" OnToolbarClick="ToolbarClickHandler" ExcelQueryCellInfoEvent="ExcelQueryCellInfoHandler" TValue="Order"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</SfGrid>

@code {
    private SfGrid<Order>? BlazorDataGrid;

    public List<Order>? Orders { get; set; }

    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 10).Select(x => new Order()
            {
                OrderID = 1000 + x,
                CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                Freight = 2.1 * x,
                OrderDate = DateTime.Now.AddDays(-x),
            }).ToList();
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string? CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
    }
    public void ExcelQueryCellInfoHandler(ExcelQueryCellInfoEventArgs<Order> args)
    {

        if (args.Column.Field == "OrderID")
        {
            if (args.Data.OrderID == 1001)
            {
                args.Cell.CellStyle.BackColor = "#DC143C";
            }
        }
    }
    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        var excelExportProperties = new ExcelExportProperties();
        var excelTheme = new ExcelTheme()
            {
                Header = new ExcelStyle()
                {
                    FontName = "Segoe UI",
                    FontColor = "#DC143C",
                    FontSize = 20
                }
            };
        var headerContent = new ExcelHeader();
        var footerContent = new ExcelFooter();
        headerContent.HeaderRows = 2;
        var headerCell = new List<ExcelCell>
            {
                new ExcelCell() { RowSpan= 2,ColSpan=5 , Value= "Order details report", Style = new ExcelStyle() { Bold = true, FontSize = 13, Italic= true }  }
            };

        var headerRow = new List<ExcelRow>
            {
                new ExcelRow() {  Cells = headerCell, Index = 1 }
            };
        var footercell = new List<ExcelCell>
            {
                new ExcelCell() { RowSpan= 2,ColSpan=5 , Value= "Order details ending", Style = new ExcelStyle() { Bold = true, FontSize = 13, Italic= true }  }
            };
        var footerRow = new List<ExcelRow>
            {
                new ExcelRow() {  Cells = footercell, Index = 1 }
            };
        headerContent.Rows = headerRow;
        footerContent.FooterRows = 3;
        footerContent.Rows = footerRow;
        excelExportProperties.Header = headerContent;
        excelExportProperties.Footer = footerContent;
        excelExportProperties.Theme = excelTheme;
        excelExportProperties.FileName = "orderDetails.xlsx";
        await this.BlazorDataGrid!.ExportToExcelAsync(excelExportProperties);
    }
    public void ExcelHeaderQueryCellInfoHandler(ExcelHeaderQueryCellInfoEventArgs args)
    {
        //Below code customizes the back color of header in Excel
        args.Cell.CellStyle.BackColor = "blue";
    }
}